     1                                  section .data
     2 00000000 0705060703020905        arr:  db 7, 5, 6, 7, 3, 2, 9, 5
     3                                  arrlen: equ $ - arr
     4                                  
     5 00000008 20                      space:  db 32
     6                                  
     7                                  section .text
     8                                  global _start
     9                                  
    10                                  _start:
    11                                    ;; bubble sort
    12 00000000 B900000000                mov rcx, 0               ; rcx will loop from 0 to arrlen-1
    13                                    
    14                                  loop1:  
    15 00000005 BB00000000                mov rbx, 0                    ;rbx will loop from 0 to arrlen-2 and be bubbly
    16                                  loop2:  
    17 0000000A 8A83[00000000]            mov al, byte [arr+rbx]       ;arr[i]
    18 00000010 8A93[01000000]            mov dl, byte [arr+rbx+1]     ;arr[i+1]
    19 00000016 4839D0                    cmp rax, rdx                  ;compare the two
    20 00000019 7C0C                      jl noswap                     ;if lesser, don't swap
    21                                    
    22                                    ;; swap
    23 0000001B 8883[01000000]            mov byte [arr+rbx+1], al
    24 00000021 8893[00000000]            mov byte [arr+rbx], dl
    25                                  
    26                                  noswap: 
    27                                   
    28 00000027 48FFC3                    inc rbx
    29 0000002A 4883FB07                  cmp rbx, arrlen-1               ;if less than arrlen-1...
    30 0000002E 7CDA                      jl loop2                      ;... loop
    31                                    
    32 00000030 48FFC1                    inc rcx
    33 00000033 4883F908                  cmp rcx, arrlen               ;if less than arrlen
    34 00000037 7CCC                      jl loop1
    35                                  
    36                                    
    37                                    ;; print everything backwards
    38 00000039 41B808000000              mov r8, arrlen
    39                                  top: 
    40 0000003F B804000000                mov rax, 4
    41 00000044 BB01000000                mov rbx, 1
    42 00000049 48B9-                     mov rcx, arr
    42 0000004B [0000000000000000] 
    43 00000053 4C01C1                    add rcx, r8
    44 00000056 4883E901                  sub rcx, 1
    45 0000005A 800130                    add byte [rcx], 48
    46 0000005D BA01000000                mov rdx, 1
    47 00000062 CD80                      int 80h
    48 00000064 802930                    sub byte [rcx], 48
    49                                  
    50 00000067 48B9-                     mov rcx, space
    50 00000069 [0800000000000000] 
    51 00000071 B804000000                mov rax, 4
    52 00000076 BB01000000                mov rbx, 1
    53 0000007B BA01000000                mov rdx, 1
    54 00000080 CD80                      int 80h
    55                                  
    56 00000082 49FFC8                    dec r8
    57 00000085 75B8                      jnz top
    58                                  
    59 00000087 B801000000                mov rax, 1
    60 0000008C BB00000000                mov rbx, 0
    61 00000091 CD80                      int 80h
    62                                  
