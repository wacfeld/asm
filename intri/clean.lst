     1                                  section .data
     2 00000000 31                        onechar db "1"
     3 00000001 30                        zerchar db "0"
     4 00000002 0A                        nlchar db 10
     5                                  
     6                                  
     7                                  section .text
     8                                  
     9                                  ;------------------------------------------------------------------------------
    10                                  ; PROCEDURE:    unpack
    11                                  ; IN:           edx:eax: qword
    12                                  ; OUT:          rax:qword
    13                                  ; MODIFIES:     rax, rdx
    14                                  ; CALLS:        
    15                                  ; DETAILS:      
    16                                  %macro unpack 0
    17                                    shl rdx, 32 ; edx -> left half of rdx
    18                                    ; and rax, 0FFFF_FFFFH ; zero left half of rax
    19                                    ; zero left half of rax
    20                                    shl rax, 32
    21                                    shr rax, 32
    22                                    add rax, rdx ; whole number in rdx now
    23                                  %endmacro
    24                                  
    25                                  ;------------------------------------------------------------------------------
    26                                  ; PROCEDURE:    bin_str
    27                                  ; IN:           rax: qword binary number
    28                                  ; OUT:          none
    29                                  ; MODIFIES:     registers
    30                                  ; CALLS:        system call
    31                                  ; DETAILS:      checks each bit, then prints corresponding ascii 0 or 1, followed by newline at very end
    32                                  %macro bin_str 0
    33                                    mov r8, rax ; we need rax, so store elsewhere
    34                                  
    35                                    mov r9,63  ; run 63+1 = 64 times
    36                                  %%shift:  shl r8,1   ; shift rightmost bit into carry flag
    37                                    jc %%one     ; if bit is 1, jump
    38                                  
    39                                  ; print 0
    40                                  %%zer:   mov rax, 4
    41                                    mov rbx, 1
    42                                    mov rcx, zerchar
    43                                    mov rdx, 1
    44                                    int 80h
    45                                    jmp %%cloop              ; jump to loop check
    46                                  
    47                                  ; print 1
    48                                  %%one    mov rax, 4
    49                                    mov rbx, 1
    50                                    mov rcx, onechar
    51                                    mov rdx, 1
    52                                    int 80h
    53                                    jmp %%cloop              ; jump to loop check
    54                                  
    55                                  ; loop check
    56                                  %%cloop: dec r9                 ; dec bit counter
    57                                    cmp r9,0               ; compare bit counter with 0
    58                                    jge %%shift               ; if (signed) greater, equal 0, loop
    59                                  
    60                                  ; print newline
    61                                    mov rax, 4
    62                                    mov rdx, 1
    63                                    mov rcx, nlchar
    64                                    mov rdx, 1
    65                                    int 80h
    66                                  %endmacro
    67                                  
    68                                  %macro timestart 1
    69                                    rdtsc
    70                                    unpack
    71                                    mov %1, rax
    72                                  %endmacro
    73                                  
    74                                  %macro timeend 1
    75                                    rdtsc
    76                                    unpack
    77                                    sub rax, %1
    78                                    bin_str
    79                                  %endmacro
    80                                  
    81                                  global _start
    82                                  _start:
    83                                  
    84                                    timestart r8
    84 00000000 0F31                <1>  rdtsc
    84                              <1>  unpack
    84 00000002 48C1E220            <2>  shl rdx, 32
    84                              <2> 
    84                              <2> 
    84 00000006 48C1E020            <2>  shl rax, 32
    84 0000000A 48C1E820            <2>  shr rax, 32
    84 0000000E 4801D0              <2>  add rax, rdx
    84 00000011 4989C0              <1>  mov %1, rax
    85                                    timeend r8
    85 00000014 0F31                <1>  rdtsc
    85                              <1>  unpack
    85 00000016 48C1E220            <2>  shl rdx, 32
    85                              <2> 
    85                              <2> 
    85 0000001A 48C1E020            <2>  shl rax, 32
    85 0000001E 48C1E820            <2>  shr rax, 32
    85 00000022 4801D0              <2>  add rax, rdx
    85 00000025 4C29C0              <1>  sub rax, %1
    85                              <1>  bin_str
    85 00000028 4989C0              <2>  mov r8, rax
    85                              <2> 
    85 0000002B 41B93F000000        <2>  mov r9,63
    85 00000031 49D1E0              <2> %%shift: shl r8,1
    85 00000034 721D                <2>  jc %%one
    85                              <2> 
    85                              <2> 
    85 00000036 B804000000          <2> %%zer: mov rax, 4
    85 0000003B BB01000000          <2>  mov rbx, 1
    85 00000040 48B9-               <2>  mov rcx, zerchar
    85 00000042 [0100000000000000]  <2>
    85 0000004A BA01000000          <2>  mov rdx, 1
    85 0000004F CD80                <2>  int 80h
    85 00000051 EB1D                <2>  jmp %%cloop
    85                              <2> 
    85                              <2> 
    85 00000053 B804000000          <2> %%one mov rax, 4
    85 00000058 BB01000000          <2>  mov rbx, 1
    85 0000005D 48B9-               <2>  mov rcx, onechar
    85 0000005F [0000000000000000]  <2>
    85 00000067 BA01000000          <2>  mov rdx, 1
    85 0000006C CD80                <2>  int 80h
    85 0000006E EB00                <2>  jmp %%cloop
    85                              <2> 
    85                              <2> 
    85 00000070 49FFC9              <2> %%cloop: dec r9
    85 00000073 4983F900            <2>  cmp r9,0
    85 00000077 7DB8                <2>  jge %%shift
    85                              <2> 
    85                              <2> 
    85 00000079 B804000000          <2>  mov rax, 4
    85 0000007E BA01000000          <2>  mov rdx, 1
    85 00000083 48B9-               <2>  mov rcx, nlchar
    85 00000085 [0200000000000000]  <2>
    85 0000008D BA01000000          <2>  mov rdx, 1
    85 00000092 CD80                <2>  int 80h
    86                                  
    87 00000094 B801000000                mov rax, 1
    88 00000099 BB00000000                mov rbx, 0
    89 0000009E CD80                      int 80h
    90                                  
