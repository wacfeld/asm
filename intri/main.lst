     1                                  ;------------------------------------------------------------------------------
     2                                  ; NAME:         intri
     3                                  ; TYPE:         main
     4                                  ; DESCRIPTION:  determines whether a point is a triangle on a sphere
     5                                  ; BUILD:        nasm -f elf64 -g -F dwarf main.asm -l main.lst
     6                                  ;               ld -o main main.o
     7                                  ;------------------------------------------------------------------------------
     8                                  section .data
     9                                  
    10 00000000 00000000000000C001-     num dt -6.0
    10 00000009 C0                 
    11                                  
    12 0000000A 00000000000000A001-     x dt 5.0
    12 00000013 40                 
    13 00000014 00000000000000C000-     y dt 3.0
    13 0000001D 40                 
    14 0000001E 000000000000008000-     z dt 2.0
    14 00000027 40                 
    15                                  
    16 00000028 000000000000008001-     a dt 4.0
    16 00000031 40                 
    17 00000032 000000000000008000-     b dt 2.0
    17 0000003B 40                 
    18 0000003C 0000000000000080FF-     c dt 1.0
    18 00000045 3F                 
    19                                  
    20 00000046 00000000000000C001-     d dt 6.0
    20 0000004F 40                 
    21 00000050 00000000000000C000-     e dt 3.0
    21 00000059 40                 
    22 0000005A 0000000000000080FF-     f dt -1.0
    22 00000063 BF                 
    23                                  
    24 00000064 000000000000000000-     origin dt 0.0, 0.0, 0.0
    24 0000006D 000000000000000000-
    24 00000076 000000000000000000-
    24 0000007F 000000             
    25                                  
    26 00000082 0000000000000080FF-     v1 dt 1.0, 0.0, 0.0
    26 0000008B 3F0000000000000000-
    26 00000094 000000000000000000-
    26 0000009D 000000             
    27 000000A0 000000000000000000-     v2 dt 0.0, 1.0, 0.0
    27 000000A9 000000000000000080-
    27 000000B2 FF3F00000000000000-
    27 000000BB 000000             
    28 000000BE 000000000000000000-     v3 dt 0.0, 0.0, 1.0
    28 000000C7 000000000000000000-
    28 000000D0 000000000000000000-
    28 000000D9 80FF3F             
    29                                  
    30 000000DC 0000000000000080FF-     p dt 1.0, 1.0, 1.0
    30 000000E5 3F0000000000000080-
    30 000000EE FF3F00000000000000-
    30 000000F7 80FF3F             
    31                                  
    32 000000FA 6C6573730A              msg1 db "less", 10
    33                                  len1 equ $ - msg1
    34 000000FF 65710A                  msg2 db "eq", 10
    35                                  len2 equ $ - msg2
    36 00000102 67726561740A            msg3 db "great", 10
    37                                  len3 equ $ - msg3
    38                                  
    39                                  ; section .bss
    40                                  
    41                                  ; ; 3 vectors defining a triangle
    42                                  ; p1 rest 3
    43                                  ; p2 rest 3
    44                                  ; p3 rest 3
    45                                  
    46                                  section .text
    47                                  global _start
    48                                  
    49                                  ;------------------------------------------------------------------------------
    50                                  ; PROCEDURE:    norm
    51                                  ; IN:           st0, st1, st2: x, y, z
    52                                  ; OUT:          st0: |(x,y,z)|
    53                                  ; MODIFIES:     st0-7
    54                                  ; CALLS:        none
    55                                  ; DETAILS:      sqrt(x*x + y*y + z*z)
    56                                  norm:
    57 00000000 DDD3                      fst   st3 ; x y z x
    58 00000002 DECB                      fmulp st3 ; y z x*x
    59 00000004 DDD3                      fst   st3 ; y z x*x y
    60 00000006 DECB                      fmulp st3 ; z x*x y*y
    61 00000008 DDD3                      fst   st3 ; z x*x y*y z
    62 0000000A DECB                      fmulp st3 ; x*x y*y z*z
    63 0000000C DEC1                      faddp st1 ; x*x+y*y z*z
    64 0000000E DEC1                      faddp st1 ; x*x+y*y+z*z
    65 00000010 D9FA                      fsqrt     ; sqrt(...)
    66                                  
    67 00000012 C3                        ret       ; leave
    68                                  
    69                                  ;------------------------------------------------------------------------------
    70                                  ; PROCEDURE:    dotp
    71                                  ; IN:           st0-2: v, st3-5: w
    72                                  ; OUT:          st0: v . w
    73                                  ; MODIFIES:     st0-7
    74                                  ; CALLS:        none
    75                                  ; DETAILS:      dot product
    76                                  dotp:
    77                                    ; x y z a b c
    78 00000013 DECB                      fmulp st3 ; y z x*a b c
    79 00000015 DECB                      fmulp st3 ; z x*a y*b c
    80 00000017 DECB                      fmulp st3 ; x*a y*b z*c
    81 00000019 DEC1                      faddp st1 ; x*a+y*b z*c
    82 0000001B DEC1                      faddp st1 ; x*a+y*b+z*c
    83                                  
    84 0000001D C3                        ret
    85                                  
    86                                  ;------------------------------------------------------------------------------
    87                                  ; PROCEDURE:    vsub
    88                                  ; IN:           st0-2: v, st3-5: w
    89                                  ; OUT:          st0-2: v-w
    90                                  ; MODIFIES:     st0-7
    91                                  ; CALLS:        none
    92                                  ; DETAILS:      
    93                                  vsub:
    94                                    ; x y z a b c
    95 0000001E DEE3                      fsubrp st3 ; y z x-a b c
    96 00000020 DEE3                      fsubrp st3 ; z x-a y-b c
    97 00000022 DEE3                      fsubrp st3 ; x-a y-b z-c
    98                                  
    99 00000024 C3                        ret
   100                                  
   101                                  ;------------------------------------------------------------------------------
   102                                  ; PROCEDURE:    vadd
   103                                  ; IN:           st0-2: v, st3-5: w
   104                                  ; OUT:          st0-2: v+w
   105                                  ; MODIFIES:     st0-7
   106                                  ; CALLS:        none
   107                                  ; DETAILS:      
   108                                  vadd:
   109                                    ; x y z a b c
   110 00000025 DEC3                      faddp st3
   111 00000027 DEC3                      faddp st3
   112 00000029 DEC3                      faddp st3
   113                                  
   114 0000002B C3                        ret
   115                                  
   116                                  ;------------------------------------------------------------------------------
   117                                  ; PROCEDURE:    vmul
   118                                  ; IN:           st0: c, st1-3: v
   119                                  ; OUT:          st0-2: cv
   120                                  ; MODIFIES:     st0-7
   121                                  ; CALLS:        none
   122                                  ; DETAILS:      
   123                                  vmul:
   124                                    ; c x y z
   125 0000002C DCC9                      fmul to st1
   126 0000002E DCCA                      fmul to st2
   127                                  
   128 00000030 DECB                      fmulp st3
   129                                  
   130 00000032 C3                        ret
   131                                  
   132                                  ;------------------------------------------------------------------------------
   133                                  ; PROCEDURE:    finv
   134                                  ; IN:           st0: c
   135                                  ; OUT:          st0: 1/c
   136                                  ; MODIFIES:     st0-7
   137                                  ; CALLS:        none
   138                                  ; DETAILS:      
   139                                  finv:
   140 00000033 D9E8                      fld1 ; 1 c
   141 00000035 D8F1                      fdiv st1
   142                                    
   143 00000037 C3                        ret
   144                                  
   145                                  ;------------------------------------------------------------------------------
   146                                  ; PROCEDURE:    cross
   147                                  ; IN:           st0-2: v, st3-5: w
   148                                  ; OUT:          st0-2: v x w
   149                                  ; MODIFIES:     st0-7
   150                                  ; CALLS:        none
   151                                  ; DETAILS:      cross product
   152                                  cross:
   153                                    ; x y z a b c
   154                                  
   155                                    ; calculate x*b
   156 00000038 DDD6                      fst st6 ; x y z a b c x
   157 0000003A D8CC                      fmul  st4 ; x*b y z a b c x
   158 0000003C DDDF                      fstp  st7 ; y z a b c x x*b
   159                                  
   160                                    ; calculate y*a
   161 0000003E DDD7                      fst   st7 ; y z a b c x x*b y
   162 00000040 D8CA                      fmul  st2 ; y*a z a b c x x*b y
   163                                  
   164                                    ; calculate u3 = x*b-y*a
   165 00000042 DEEE                      fsubp st6 ; z a b c x x*b-y*a y
   166                                  
   167                                    ; calculate z*a then discard a
   168 00000044 DCC9                      fmul to st1 ; z z*a b c x u3 y
   169                                  
   170                                    ; calculate x*c then discard x
   171 00000046 D9C3                      fld st3 ; c z z*a b c x u3 y
   172 00000048 DECD                      fmulp st5 ; z z*a b c x*c u3 y
   173                                  
   174                                    ; calculate u2 = z*a-x*c
   175 0000004A D9C1                      fld st1 ; z*a z z*a b c x*c u3 y
   176 0000004C DEE5                      fsubrp st5 ; z z*a b c z*a-x*c u3 y
   177                                    
   178                                    ; calculate z*b and discard z, b
   179 0000004E D8CA                      fmul st2 ; z*b z*a b c u2 u3 y
   180                                  
   181                                    ; calculate y*c and discard y, c
   182 00000050 D9C6                      fld  st6 ; y z*b z*a b c u2 u3 y
   183 00000052 DECC                      fmulp st4 ; z*b z*a b y*c u2 u3 y
   184                                  
   185                                    ; calcelate y*c-z*b
   186 00000054 DEEB                      fsubp st3 ; z*a b y*c-z*b u2 u3 y
   187                                  
   188                                    ; _ _ u1 u2 u3 _
   189                                    ; pop twice
   190 00000056 DDD8                      fstp st0
   191 00000058 DDD8                      fstp st0
   192                                    ; u1 u2 u3
   193                                  
   194 0000005A C3                        ret
   195                                  
   196                                  ;------------------------------------------------------------------------------
   197                                  ; PROCEDURE:    vload
   198                                  ; IN:           rax: address of vector
   199                                  ; OUT:          st0-2: components of vector
   200                                  ; MODIFIES:     st0-7
   201                                  ; CALLS:        none
   202                                  ; DETAILS:      
   203                                  %macro vload 1
   204                                    fld tword [%1 + 20]
   205                                    fld tword [%1 + 10]
   206                                    fld tword [%1]
   207                                  
   208                                  %endmacro
   209                                  
   210                                  ;------------------------------------------------------------------------------
   211                                  ; PROCEDURE:    vpush
   212                                  ; IN:           st0-2: vector
   213                                  ; OUT:          vector on stack
   214                                  ; MODIFIES:     st0-7, stack
   215                                  ; CALLS:        none
   216                                  ; DETAILS:      pushes st0-2 onto stack and pops st0-2
   217                                  %macro vpush 0
   218                                    sub rsp, 30 ; allocate 3 doubles on stack
   219                                    fstp tword [rsp]
   220                                    fstp tword [rsp+10]
   221                                    fstp tword [rsp+20]
   222                                  %endmacro
   223                                  
   224                                  ;------------------------------------------------------------------------------
   225                                  ; PROCEDURE:    vpop
   226                                  ; IN:           vector on stack
   227                                  ; OUT:          st0-2: vector
   228                                  ; MODIFIES:     st0-7, stack
   229                                  ; CALLS:        none
   230                                  ; DETAILS:      pops vector off stack, pushes into st0-2
   231                                  %macro vpop 0
   232                                    fld tword [rsp+20]
   233                                    fld tword [rsp+10]
   234                                    fld tword [rsp]
   235                                  
   236                                    add rsp, 30 ; free 3 twords on stack
   237                                  %endmacro
   238                                  
   239                                  ;------------------------------------------------------------------------------
   240                                  ; PROCEDURE:    normal
   241                                  ; IN:           3 addresses of vectors
   242                                  ; OUT:          st0-2: normal vector to plane defined by 3 vectors
   243                                  ; MODIFIES:     st0-7
   244                                  ; CALLS:        
   245                                  ; DETAILS:      
   246                                  %macro normal 3
   247                                    vload %1   ; v1 . .
   248                                    vload %2   ; v2 . . v1 . .
   249                                  
   250                                    call  vsub  ; v2-v1 . .
   251                                  
   252                                    vpush       ; 
   253                                  
   254                                    vload %1   ; v1 . .
   255                                    vload %3   ; v3 . .
   256                                  
   257                                    call  vsub  ; v3-v1 . .
   258                                  
   259                                    vpop        ; v2-v1 . . v3-v1 . .
   260                                  
   261                                    call  cross ; n
   262                                    
   263                                  %endmacro
   264                                    
   265                                  ;------------------------------------------------------------------------------
   266                                  ; PROCEDURE:    center
   267                                  ; IN:           addresses of 3 vectors
   268                                  ; OUT:          st0-2: average of 3 vectors
   269                                  ; MODIFIES:     st0-7
   270                                  ; CALLS:        
   271                                  ; DETAILS:      
   272                                  %macro center 3
   273                                    vload %1 ; v1
   274                                    vload %2 ; v2 v1
   275                                    call vadd ; v1+v2
   276                                    vload %3 ; v3 v1+v2
   277                                    call vadd ; v1+v2+v3
   278                                    
   279                                    ; sum = v1+v2+v3
   280                                  
   281                                    ; obtain the number 3...
   282                                    fld1 ; 1 sum
   283                                    fadd st0 ; 2 sum
   284                                    fld1 st0 ; 1 2 sum
   285                                    faddp st1 ; 3 sum
   286                                    call finv ; 1/3 sum
   287                                    call vmul ; 1/3*sum
   288                                  %endmacro
   289                                    
   290                                  
   291                                  _start:
   292 0000005B 9BDBE3                    finit ; reset fpuregs
   293                                    
   294                                    
   295                                  .comp:
   296 0000005E DBF1                      fcomi st1
   297 00000060 7206                      jb .less
   298 00000062 741C                      je .eq
   299 00000064 7732                      ja .great
   300 00000066 EB48                      jmp .exit
   301                                    
   302                                  .less:
   303 00000068 B804000000                mov eax, 4
   304 0000006D BB01000000                mov ebx, 1
   305 00000072 B9[FA000000]              mov ecx, msg1
   306 00000077 BA05000000                mov edx, len1
   307 0000007C CD80                      int 80h
   308 0000007E EB30                      jmp .exit
   309                                  
   310                                  .eq:
   311 00000080 B804000000                mov eax, 4
   312 00000085 BB01000000                mov ebx, 1
   313 0000008A B9[FF000000]              mov ecx, msg2
   314 0000008F BA03000000                mov edx, len2
   315 00000094 CD80                      int 80h
   316 00000096 EB18                      jmp .exit
   317                                  
   318                                  .great:
   319 00000098 B804000000                mov eax, 4
   320 0000009D BB01000000                mov ebx, 1
   321 000000A2 B9[02010000]              mov ecx, msg3
   322 000000A7 BA06000000                mov edx, len3
   323 000000AC CD80                      int 80h
   324 000000AE EB00                      jmp .exit
   325                                  
   326                                  
   327                                  .exit:
   328 000000B0 B801000000                mov rax, 1
   329 000000B5 BB00000000                mov rbx, 0
   330 000000BA CD80                      int 80h
   331                                  
